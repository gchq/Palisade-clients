<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2018-2021 Crown Copyright
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>uk.gov.gchq.palisade</groupId>
        <artifactId>clients</artifactId>
        <version>0.5.2-${revision}</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <developers>
        <developer>
            <name>PalisadeDevelopers</name>
            <organization>GCHQ</organization>
            <organizationUrl>https://github.com/gchq</organizationUrl>
        </developer>
    </developers>

    <!--  *********** Artifact ID ***********    -->
    <artifactId>client-s3</artifactId>
    <url>https://github.com/gchq/Palisade-clients/tree/develop/client-akka</url>
    <name>GCHQ Palisade - S3-Server Client</name>
    <description>
        The S3 Palisade Client starts a web server presenting an S3-compliant API for querying resources and data returned by Palisade.
        After POSTing a request, a bucket is returned using the Palisade token, which can be queried using an existing S3-compatible tool (such as Apache Spark).
    </description>
    <!--  *********** Artifact ID ***********    -->

    <scm>
        <url>${scm.url}</url>
        <connection>${scm.connection}</connection>
        <developerConnection>${scm.developer.connection}</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Dependency versions -->
        <scala.version>2.13</scala.version>
        <akka.version>2.6.10</akka.version>
        <akka.http.version>10.2.1</akka.http.version>
        <jackson.version>2.11.0</jackson.version>
    </properties>

    <dependencies>
        <!--
        ~ Palisade
        -->
        <dependency>
            <!-- Common types (User, Resource, Context) -->
            <groupId>uk.gov.gchq.palisade</groupId>
            <artifactId>client-akka</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <!--
        ~ Akka and Alpakka (Kafka)
        -->
        <dependency>
            <!-- Core Akka streaming -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <!-- Akka HTTP/Websocket server -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <!-- Akka HTTP JSON serialisation -->
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-jackson_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <!-- Jackson Dependency -->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!--
        ~ Spring
        -->
        <dependency>
            <!-- Caching/Persistence stores -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>
        <dependency>
            <!-- Caching/Persistence stores -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-r2dbc</artifactId>
        </dependency>
        <dependency>
            <!-- R2DBC implementation of ReactiveCrudRepositories -->
            <groupId>io.r2dbc</groupId>
            <artifactId>r2dbc-h2</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/unit-tests/resources</directory>
            </testResource>
            <testResource>
                <directory>src/component-tests/resources</directory>
            </testResource>
            <testResource>
                <directory>src/contract-tests/resources</directory>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>add-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${basedir}/src/unit-tests/java</source>
                                <source>${basedir}/src/component-tests/java</source>
                                <source>${basedir}/src/contract-tests/java</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-resources</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <filtering>true</filtering>
                                    <directory>${basedir}/src/unit-tests/resources</directory>
                                    <directory>${basedir}/src/component-tests/resources</directory>
                                    <directory>${basedir}/src/contract-tests/resources</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <configuration>
                            <classifier>exec</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>